var $jscomp = {
    scope: {},
    findInternal: function(a, b, c) {
        a instanceof String && (a = String(a));
        for (var d = a.length, e = 0; e < d; e++) {
            var f = a[e];
            if (b.call(c, f, e, a)) return {
                i: e,
                v: f
            }
        }
        return {
            i: -1,
            v: void 0
        }
    }
};
$jscomp.defineProperty = "function" == typeof Object.defineProperties ? Object.defineProperty : function(a, b, c) {
    if (c.get || c.set) throw new TypeError("ES3 does not support getters and setters.");
    a != Array.prototype && a != Object.prototype && (a[b] = c.value)
};
$jscomp.getGlobal = function(a) {
    return "undefined" != typeof window && window === a ? a : "undefined" != typeof global ? global : a
};
$jscomp.global = $jscomp.getGlobal(this);
$jscomp.polyfill = function(a, b, c, d) {
    if (b) {
        c = $jscomp.global;
        a = a.split(".");
        for (d = 0; d < a.length - 1; d++) {
            var e = a[d];
            e in c || (c[e] = {});
            c = c[e]
        }
        a = a[a.length - 1];
        d = c[a];
        b = b(d);
        b != d && null != b && $jscomp.defineProperty(c, a, {
            configurable: !0,
            writable: !0,
            value: b
        })
    }
};
$jscomp.polyfill("Array.prototype.find", function(a) {
    return a ? a : function(a, c) {
        return $jscomp.findInternal(this, a, c).v
    }
}, "es6-impl", "es3");
var Demo = function() {
        this.basic = new Basic("basic-main-content");
        // this.expend = new Expend("expend-main-content");
        this.statistics = new Statistics("statistics-main-content");
        this.block = new Block("block-main-content");
        this.combo = new Combo("combo-main-echarts");
        this.init = function() {
            this.basic.render();
            this.block.render();
            // this.expend.render();
            this.statistics.render();
            this.combo.render();
            return this
        }
    },
    Basic = function(a) {
        this.elem = a;
        this.data = function() {
            var op = {tooltip:{formatter:"{a} <br/>{b} : {c}"},toolbox:{feature:{restore:{},saveAsImage:{}}},series:[{name:'交易tps',type:'gauge',detail:{formatter:"{value}",width:"90",height:"60"},center:["50%","70%"],radius:"120%",min:0,max:2000,startAngle:180,endAngle:0,data:[{value:50,name:'交易tps(交易数/时)'}]}]}
            return op
        };
        this.render = function() {
            $("#" + this.elem).height(400);
            var op = this.data()         //option and chart retrived for be used in setInterval

            this.chart = echarts.init(document.getElementById(a));
            this.chart.setOption(op)

            var chart = this.chart
            $.get("http://10.213.33.174:10010/trans_last_hour",function(data,status){
                console.log(data)
                // op.series[0].data[0].value = (Math.random() * 100).toFixed(2) - 0;
                op.series[0].data[0].value = data
                chart.setOption(op, true);
            });

        }
    },
    Block = function(a) {
        this.elem = a;
        this.data = function() {
            var op = {title:{text:'区块高度'},legend:{data:['原高度','增长高度']},dataZoom:[{type:'slider',start:0,end:100},{type:'inside',}],toolbox:{feature:{restore:{},saveAsImage:{}}},tooltip:{trigger:'axis',axisPointer:{type:'line'}},tooltip:{},xAxis:{data:[]},yAxis:{}};
            return op
        };
        this.render = function() {
            $("#" + this.elem).height(400);
            var chart = echarts.init(document.getElementById(a));
            chart.setOption(this.data())

                $.get("http://10.213.33.174:10010/daily_blocks_height",function(data,status){
                    var a = data.split('|')
                    var categories = []
                    var seriesdata = []

                    for(var j =0; j<a.length; j++){
                        var tmp = a[j].split(',')
                        categories.push(tmp[0])
                        seriesdata.push(Number(tmp[1]).toFixed(0))
                    }

                    var orgindata = []    //双数据柱图，基础数据
                    var incredata = []     //增长数据
                    for(var j=0 ; j< seriesdata.length; j++){
                        if(j==0){
                            orgindata[j] = 0
                            incredata[j] = seriesdata[j]
                        }else{
                            orgindata[j] = seriesdata[j-1]
                            incredata[j] = seriesdata[j] - seriesdata[j-1]
                        }
                    }

                    op = {
                        xAxis: {
                            data: categories
                        },
                        series: [{
                            name: '原高度',
                            type: 'bar',
                            stack: '总量',
                            color: ['#3398DB'],
                            label: {
                                normal: {
                                    show: true,
                                    position: 'insideRight'
                                }
                            },
                            data: orgindata
                        },
                        {
                            name: '增长高度',
                            type: 'bar',
                            stack: '总量',
                            label: {
                                normal: {
                                    show: true,
                                    position: 'insideRight'
                                }
                            },
                            data: incredata
                        }]
                    };
                    chart.setOption(op)
                })
        }
    },
    Expend = function(a) {
        this.elem = a;
        this.data = function() {
            return "<table width='100%' class='am-table am-table-bd am-table-bdrs am-table-striped am-table-hover am-text-xs'><thead><tr><th>\u9879\u76ee</th><th>\u72b6\u6001</th><th>\u53d1\u751f\u65f6\u95f4</th></tr></thead><tbody><tr><td>\u573a\u666fA</td><td><span class='am-badge am-badge-danger'>\u5931\u8d25</span></td><td>2016-08-25</td></tr></tr></thead><tbody><tr><td>\u573a\u666fB</td><td><span class='am-badge am-badge-success'>\u6210\u529f</span></td><td>2016-08-25</td></tr></tr></thead><tbody><tr><td>\u573a\u666fC</td><td><span class='am-badge am-badge-success'>\u6210\u529f</span></td><td>2016-08-25</td></tr></tbody></table>"
        };
        this.render = function() {
            $("#" + this.elem).append(this.data())
        }
    },
    Statistics = function(a) {
        this.elem = a;
        this.data = function() {
            return '<html><head></head><body><table width="100%"class="am-table am-table-bd am-table-bdrs am-table-striped am-table-hover am-text-xs"><thead><tr><th>type</th><th>count</th><th>last</th></tr></thead><tbody><tr><td>1</td><td><span class="am-badge am-badge-default">1</span></td><td>2017-5-9</td></tr></tbody><tbody><tr><td>3</td><td><span class="am-badge am-badge-primary">4236</span></td><td>2017-5-9</td></tr></tbody></table></body></html>'
        };
        this.render = function() {
            $("#" + this.elem).append(this.data())
        }
    },
    Combo = function(a) {
        this.elem = a;
        this.data = function() {
            var op = {title:{text:'区块高度'},legend:{data:['原高度','增长高度']},dataZoom:[{type:'slider',start:0,end:100},{type:'inside',}],toolbox:{feature:{restore:{},saveAsImage:{}}},tooltip:{trigger:'axis',axisPointer:{type:'line'}},tooltip:{},xAxis:{data:[]},yAxis:{}};
            return op
        };
        this.render = function() {
            $("#" + this.elem).height(400);
            var chart = echarts.init(document.getElementById(a));
            // chart.setOption(this.data())

                $.get("http://10.213.33.174:10010/trans_in_blocks",function(data,status){
                // myChart1.hideLoading();
                // console.log(data)
                var a = data.split('|')
                var xAxisData = [];
                var data1 = [];

                for(var j =0; j<a.length; j++){
                    var tmp = a[j].split(',')
                    // categories.push(tmp[0])
                    // seriesdata.push(tmp[1])
                    xAxisData.push( tmp[0]);
                    data1.push(tmp[1]);
                }

                option3 = {
                    title: {
                        text: '区块交易柱图'
                    },
                    color: ['#3398DB'],
                    dataZoom: [
                        {   // 这个dataZoom组件，默认控制x轴。
                            type: 'slider', // 这个 dataZoom 组件是 slider 型 dataZoom 组件
                            start: 0,      // 左边在 10% 的位置。
                            end: 100         // 右边在 60% 的位置。
                        },
                        {   // 这个dataZoom组件，也控制x轴。
                            type: 'inside', // 这个 dataZoom 组件是 inside 型 dataZoom 组件
            
                        }
                    ],
    toolbox: {
        feature: {
            restore: {},
            saveAsImage: {}
        }
    },
                    tooltip: {},
                    xAxis: {
                        data: xAxisData,
                        silent: false,
                        splitLine: {
                            show: false
                        }
                    },
                    yAxis: {
                    },
                    series: [{
                        name: 'bar',
                        type: 'bar',
                        data: data1
                        // animationDelay: function (idx) {
                        //     return idx * 10;
                        // }
                    }]
                    // animationEasing: 'elasticOut',
                    // animationDelayUpdate: function (idx) {
                    //     return idx * 5;
                    // }
                };


                // 使用刚指定的配置项和数据显示图表。
                chart.setOption(option3);
            })
        }
    },
    Details = function(a, b) {
        this.blocktable = a;
        this.transtable = b;

        this.render = function() {
            
            //blocktable
            blocktable = this.blocktable
            $.get("http://10.213.33.174:10010/blocks", function(datab, status) {
                dataSetb = datab.split('|')
                for (j = 0; j < dataSetb.length; j++) {
                    dataSetb[j] = dataSetb[j].split(',')
                }
                console.log(dataSetb[0])
                $("#" + blocktable).DataTable({
                    data: dataSetb,
                    columns: [{
                        title: "块高度"
                    }, {
                        title: "前一块哈希"
                    }, {
                        title: "数据哈希"
                    }]
                });
            })

            //transaction table
            transtable = this.transtable
            $.get("http://10.213.33.174:10010/transactions", function(datat, status) {
                dataSett = datat.split('|')
                for (j = 0; j < dataSett.length; j++) {
                    dataSett[j] = dataSett[j].split(',')
                }

                $('#' + transtable).DataTable({
                    data: dataSett,
                    columns: [{
                        title: "交易号"
                    }, {
                        title: "交易类型"
                    }, {
                        title: "交易时间"
                    }, {
                        title: "智能合约名"
                    }, {
                        title: "通道名"
                    }, {
                        title: "所属区块"
                    }]
                });
            })
        }
    };

Box.Application.addModule("topbarcollapse", function(a) {
    function b() {
        $(c).find("li a").removeClass("am-active")
    }
    var c;
    return {
        init: function() {
            c = a.getElement()
        },
        destroy: function() {
            c = null
        },
        onclick: function(c, e, f) {
            switch (f) {
            case "fisrt":
                b();
                $(e).addClass("am-active");
                a.broadcast("firstOpen");
                a.broadcast("secondClose");
                break;
            case "second":
                b();
                $(e).addClass("am-active");
                a.broadcast("firstClose");
                a.broadcast("secondOpen")
            }
        }
    }
});
Box.Application.addModule("firstlevel", function(a) {
    var b;
    return {
        init: function() {
            b = a.getElement();
            (new Demo).init()
        },
        destroy: function() {
            b = null
        },
        onclick: function(a, b, e) {},
        onchange: function(a, b, e) {},
        onmessage: {
            firstOpen: function() {
                $(b).hasClass("am-hide") && $(b).removeClass("am-hide")
            },
            firstClose: function() {
                $(b).hasClass("am-hide") || $(b).addClass("am-hide")
            }
        }
    }
});
Box.Application.addModule("secondlevel", function(a) {
    var b, c, d = -1;
    return {
        init: function() {
            b = a.getElement();
            c = new Details("detail-main-blocks", "detail-main-trans")
        },
        destroy: function() {
            b = c = null
        },
        onclick: function(a, b, c) {},
        onchange: function(a, b, c) {},
        onmessage: {
            secondOpen: function() {
                $(b).hasClass("am-hide") && ($(b).removeClass("am-hide"), -1 == d && c.render(), d++)
            },
            secondClose: function() {
                $(b).hasClass("am-hide") || $(b).addClass("am-hide")
            }
        }
    }
});
